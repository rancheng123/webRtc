/*
       影响视频编码的因素。（编码会影响机器性能）

           桢率  （越大，越流畅，耗性能越大，    越小，越不流畅， 耗性能越小）

               原理：
               一秒多少桢                   越大，      编码所消耗的qpSum(量子参数)越大

           桢的尺寸 （越大，空间感越强，耗性能越大，    越小，空间感越差， 耗性能越小） 设置合理， 可以避免性能的浪费。

               frameWidth                 越大，每一帧的编码所消耗的qpSum(量子参数)越大
               frameHeight                越大，每一帧的编码所消耗的qpSum(量子参数)越大

           相邻两桢的变化
               画面的变化度                 越大，每一帧的编码所消耗的qpSum(量子参数)越大

                   画面越简单，编码压力越小
                   画面越复杂，编码压力越大

            屏幕分辨率（又称解析度）（屏幕像素点）

               相同尺寸屏幕（单位面积内），  分辨率越高（如 1600 x 1200），像素越多，单个像素尺寸越小，  画质越清晰
               相同尺寸屏幕（单位面积内），  分辨率越低（如 640 x 480）  ，像素越少，单个像素尺寸越大，  画质越模糊


                              QVGA                                  320x240px.    即横向有320个点，纵向有240个点 (VGA 的quarter四分之一)
                              VGA(Video Graphics Array 视频图像点)    640x480px.    即横向有640个点，纵向有480个点
                              HD（High Definition 高清）             1280x720px.   即横向有1280个点，纵向有720个点

                        1080p (垂直方向像素点数量为 1080, ，但并未规定水平方向像素点)
                              FHD（Full HD 全高清）                  1920x1080px.   即横向有1920个点，纵向有1080个点

                        1440p (垂直方向像素点数量为 1440, ，但并未规定水平方向像素点)


                        4K    (水平方向像素点数量为 4000)
                                                                    4096x2160px  即横向有4096个点，纵向有2160个点

                        8K    (水平方向像素点数量为 8000)
                                                                    7680x4320px  即横向有7680个点，纵向有4320个点




            摄像头像素（图像分辨率）
               200W像素镜头
               500W像素镜头（更加清晰，细节更精致）





            其他进程占用当前机器的性能情况

               其他进程占用的内存越小，越有利于编码
               其他进程占用的内存越大，越不利于编码

            入会方数





        由于网络原因 和机器当时的性能原因  造成 roundTripTime(往返时间) 抖动




        过程
           1. 创建端

           1.视频采集，获取视频流
               可以设置frameWidth，frameHeight, frameRate

               1. 获取摄像头流
               2. 获取屏幕流

               navigator.webkitGetUserMedia({
                    audio: true,
                    video: {
                        mandatory: {},
                        optional: [],

                        //获取一个最接近 1280x720 的相机分辨率
                        // width: 1280, height: 720,
                        //
                        // //帧率
                        // frameRate: {
                        //     ideal: 10,
                        //     max: 15
                        // },
                        //
                        // //前置或者后置摄像头  "user" : "environment"
                        // facingMode: "user"
                    }
                }, (stream)=>{

               })


           1.添加视频轨道

           //收发机同时具备接受和发送的能力
           2.添加收发机，将本地视频轨道放入发送装置内, 此时状态 不发送不接收（currentDirection:null）

           3.创建offer
           4.需要和远端进行协商
           5.创建offer成功


           6.设置本地描述( type offer 包含 version版本和 视频轨道信息，如流id )
           7.修改收发机，收发机增加了一个协商过的流id

           8.信令状态改变
              have-local-offer


           9.发送offer 给远端



           9.收集 候选地址
           10. 添加 本地候选地址1， 它发给远端
           11. 添加 本地候选地址2， 它发给远端
           12. 添加 远端候选地址1
           13. 添加 远端候选地址2
                pc.addIceCandidate(new RTCIceCandidate(data.candidate))

                候选地址的类型
                    1.host                                   表示   与本地局域网上设备  的连接
                    2.srflx（服务器反身性Server Reflexive）    表示   通过公网Ip转换      的连接
                    3.relay                                  用于描述TURN的连接性。当双方都提供这样的数据包时，那么连接是绝对可能进行的。



           12.远端返回answer
           12.设置远端描述(type answer 包含 version版本和 视频轨道信息，如流id )
                pc.setRemoteDescription(new RTCSessionDescription(data.answer))


           13.修改收发机
               1.如果远端有视频流返回
                   将远端视频轨道放入接收装置内, 此时状态 既发送又接收（currentDirection:sendrecv）
               2.如果远端没有视频流返回
                                            此时状态 只发送不接收（currentDirection:sendonly）


           14.检查可用的 候选地址对
           15.找到可用的 候选地址对，并且开始连接
           16.连接成功
           17.信令状态改变
              stable



           18.关闭流
                var sender = pc.getSenders()[0]
                pc.removeTrack(sender);





    调试 和分析 webRtc
        chrome://webrtc-internals



码率(kbps,  kilobit per second)
    单位时间传送的数据位数

取样率（只属于音频）
    单位时间取样次数    44.1kHz(44100次/每秒)

帧率 （只属于视频，  fps,   frames per second，  ）
    单位时间运行的帧数   30fps （30桢/每秒）





    摄像头像素固定， 屏幕分辩率 越低， 画面越清晰
    摄像头像素越大， 屏幕分辩率 固定， 画面越清晰




硬编码和软编码

    软件编码：CPU（Central Processing Unit，  中央处理器）进行编码，      CPU负载重，  性能相对低    实现直接、简单，参数调整方便，易升级，        低码率下 质量相对好






比如mpeg4解码插件ffdshow，ac3解码插件ac3fliter等。只有装了各种解码插件你的电脑才能重放这些图像和声音。
　　[编辑本段]解码器解析



    硬件编码：GPU（Graphics Processing Unit， 图形处理器）硬件进行编码，              性能相对高        低码率下 质量相对查（移植了优秀的软编码算法，提升了质量）

        优点：
            效率高，功耗低
        缺点：
            缺乏有力的支持（包括滤镜、字幕等）
            局限性较大（例如打开硬件解码后PC的节能方面的功能失效cnq等）
            设置较为复杂；


        需要有支持 硬件解码功能的  芯片，显卡

            硬件和驱动

        需要安装驱动







视频编码

    定义：
        对原始的视频进行压缩

        原因：
            由于连续的帧之间相似性极高，（视频存在太多的冗余， 不利于储存传输）



    将原始视频格式的文件  压缩成  另一种视频格式文件的方式。


   */
